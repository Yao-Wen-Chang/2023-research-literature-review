@article{article,
author = {Antonio, Cimino and Longo, Francesco and Mirabelli, Giovanni},
year = {2010},
month = {04},
pages = {},
title = {A General Simulation Framework for Supply Chain Modeling: State of the Art and Case Study},
volume = {7},
journal = {International Journal of Computer Science Issues}
}

@INPROCEEDINGS{5718996,
author={Alberts, Christopher J. and Dorofee, Audrey J. and Creel, Rita and Ellison, Robert J. and Woody, Carol},
booktitle={2011 44th Hawaii International Conference on System Sciences}, 
title={A Systemic Approach for Assessing Software Supply-Chain Risk}, 
year={2011},
volume={},
number={},
pages={1-8},
doi={10.1109/HICSS.2011.36}
}

@ARTICLE{1203227,
author={Levy, E.},
journal={IEEE Security & Privacy}, 
title={Poisoning the software supply chain}, 
year={2003},
volume={1},
number={3},
pages={70-73},
doi={10.1109/MSECP.2003.1203227}
}

@INPROCEEDINGS{9574561,
author={Lv, Xiaoshao and Shu, Hui and Kang, Fei and Huang, Yuyao},
booktitle={2021 IEEE International Conference on Computer Science, Electronic Information Engineering and Intelligent Control Technology (CEI)}, 
title={A software upgrade security analysis method based on program analysis}, 
year={2021},
volume={},
number={},
pages={536-541},
doi={10.1109/CEI52496.2021.9574561}
}

@INPROCEEDINGS{7774532,
author={Cazzola, Walter and Jalili, Mehdi},
booktitle={2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE)}, 
title={Dodging Unsafe Update Points in Java Dynamic Software Updating Systems},
year={2016},
volume={},
number={},
pages={332-341},
doi={10.1109/ISSRE.2016.17}
}

@INPROCEEDINGS{5428501,
author={Ellison, Robert J. and Woody, Carol},
booktitle={2010 43rd Hawaii International Conference on System Sciences}, 
title={Supply-Chain Risk Management: Incorporating Security into Software Development}, 
year={2010},
volume={},
number={},
pages={1-10},
doi={10.1109/HICSS.2010.355}
}

@article{DBLP:journals/corr/abs-2005-09535,
  author       = {Marc Ohm and
                  Henrik Plate and
                  Arnold Sykosch and
                  Michael Meier},
  title        = {Backstabber's Knife Collection: {A} Review of Open Source Software
                  Supply Chain Attacks},
  journal      = {CoRR},
  volume       = {abs/2005.09535},
  year         = {2020},
  url          = {https://arxiv.org/abs/2005.09535},
  eprinttype    = {arXiv},
  eprint       = {2005.09535},
  timestamp    = {Fri, 22 May 2020 16:21:28 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2005-09535.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@ARTICLE{9382367,
author={Peisert, Sean and Schneier, Bruce and Okhravi, Hamed and Massacci, Fabio and Benzel, Terry and Landwehr, Carl and Mannan, Mohammad and Mirkovic, Jelena and Prakash, Atul and Michael, James Bret},
journal={IEEE Security & Privacy}, 
title={Perspectives on the SolarWinds Incident}, 
year={2021},
volume={19},
number={2},
pages={7-13},
doi={10.1109/MSEC.2021.3051235}
}

@techreport{EllisonEvaluatingand2010,
title={Evaluating and Mitigating Software Supply Chain Security Risks},
author={Robert Ellison and John Goodenough and Charles Weinstock and Carol Woody},
year={2010},
number={CMU/SEI-2010-TN-016},
institution={Software Engineering Institute, Carnegie Mellon University},
address={Pittsburgh, PA},
url={http://resources.sei.cmu.edu/library/asset-view.cfm?AssetID=9337} 
} 

@misc{ladisa2022detection,
title={Towards the Detection of Malicious Java Packages}, 
author={Piergiorgio Ladisa and Henrik Plate and Matias Martinez and Olivier Barais and Serena Elisa Ponta},
year={2022},
eprint={2210.03998},
archivePrefix={arXiv},
primaryClass={cs.CR}
}

@inproceedings{10.1145/3560835.3564547,
author = {Jiang, Wenxin and Synovic, Nicholas and Sethi, Rohan and Indarapu, Aryan and Hyatt, Matt and Schorlemmer, Taylor R. and Thiruvathukal, George K. and Davis, James C.},
title = {An Empirical Study of Artifacts and Security Risks in the Pre-Trained Model Supply Chain},
year = {2022},
isbn = {9781450398855},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3560835.3564547},
doi = {10.1145/3560835.3564547},
abstract = {Deep neural networks achieve state-of-the-art performance on many tasks, but require increasingly complex architectures and costly training procedures. Engineers can reduce costs by reusing a pre-trained model (PTM) and fine-tuning it for their own tasks. To facilitate software reuse, engineers collaborate around model hubs, collections of PTMs and datasets organized by problem domain. Although model hubs are now comparable in popularity and size to other software ecosystems, the associated PTM supply chain has not yet been examined from a software engineering perspective. We present an empirical study of artifacts and security features in 8 model hubs. We indicate the potential threat models and show that the existing defenses are insufficient for ensuring the security of PTMs. We compare PTM and traditional supply chains, and propose directions for further measurements and tools to increase the reliability of the PTM supply chain.},
booktitle = {Proceedings of the 2022 ACM Workshop on Software Supply Chain Offensive Research and Ecosystem Defenses},
pages = {105–114},
numpages = {10},
keywords = {empirical software engineering, deep neural networks, model hubs, machine learning, software supply chain, software reuse},
location = {Los Angeles, CA, USA},
series = {SCORED'22}
}

@article{DBLP:journals/corr/abs-2002-11028,
  author       = {Ying Wang and
                  Bihuan Chen and
                  Kaifeng Huang and
                  Bowen Shi and
                  Congying Xu and
                  Xin Peng and
                  Yang Liu and
                  Yijian Wu},
  title        = {An Empirical Study of Usages, Updates and Risks of Third-Party Libraries
                  in Java Projects},
  journal      = {CoRR},
  volume       = {abs/2002.11028},
  year         = {2020},
  url          = {https://arxiv.org/abs/2002.11028},
  eprinttype    = {arXiv},
  eprint       = {2002.11028},
  timestamp    = {Thu, 17 Dec 2020 16:29:29 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2002-11028.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1145/3560835.3564556,
author = {Okafor, Chinenye and Schorlemmer, Taylor R. and Torres-Arias, Santiago and Davis, James C.},
title = {SoK: Analysis of Software Supply Chain Security by Establishing Secure Design Properties},
year = {2022},
isbn = {9781450398855},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3560835.3564556},
doi = {10.1145/3560835.3564556},
abstract = {This paper systematizes knowledge about secure software supply chain patterns. It identifies four stages of a software supply chain attack and proposes three security properties crucial for a secured supply chain: transparency, validity, and separation. The paper describes current security approaches and maps them to the proposed security properties, including research ideas and case studies of supply chains in practice. It discusses the strengths and weaknesses of current approaches relative to known attacks and details the various security frameworks put out to ensure the security of the software supply chain. Finally, the paper highlights potential gaps in actor and operation-centered supply chain security techniques.},
booktitle = {Proceedings of the 2022 ACM Workshop on Software Supply Chain Offensive Research and Ecosystem Defenses},
pages = {15–24},
numpages = {10},
keywords = {software supply chain attacks, collaborative software engineering, security properties, software reuse},
location = {Los Angeles, CA, USA},
series = {SCORED'22}
}

@ARTICLE{7180277,
author={Sabbagh, Bilal Al and Kowalski, Stewart},
journal={IEEE Security & Privacy}, 
title={A Socio-technical Framework for Threat Modeling a Software Supply Chain}, 
year={2015},
volume={13},
number={4},
pages={30-39},
doi={10.1109/MSP.2015.72}
}

@INPROCEEDINGS {10179304,
author = {P. Ladisa and H. Plate and M. Martinez and O. Barais},
booktitle = {2023 IEEE Symposium on Security and Privacy (SP)},
title = {SoK: Taxonomy of Attacks on Open-Source Software Supply Chains},
year = {2023},
volume = {},
issn = {},
pages = {1509-1526},
abstract = {The widespread dependency on open-source software makes it a fruitful target for malicious actors, as demonstrated by recurring attacks. The complexity of today’s open-source supply chains results in a significant attack surface, giving attackers numerous opportunities to reach the goal of injecting malicious code into open-source artifacts that is then downloaded and executed by victims.This work proposes a general taxonomy for attacks on open-source supply chains, independent of specific programming languages or ecosystems, and covering all supply chain stages from code contributions to package distribution. Taking the form of an attack tree, it covers 107 unique vectors, linked to 94 real-world incidents, and mapped to 33 mitigating safeguards.User surveys conducted with 17 domain experts and 134 software developers positively validated the correctness, comprehensiveness and comprehensibility of the taxonomy, as well as its suitability for various use-cases. Survey participants also assessed the utility and costs of the identified safeguards, and whether they are used.},
keywords = {surveys;visualization;costs;taxonomy;supply chains;malware;security},
doi = {10.1109/SP46215.2023.10179304},
url = {https://doi.ieeecomputersociety.org/10.1109/SP46215.2023.10179304},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {may}
}

@misc{ladisa2023journey,
title={Journey to the Center of Software Supply Chain Attacks}, 
author={Piergiorgio Ladisa and Serena Elisa Ponta and Antonino Sabetta and Matias Martinez and Olivier Barais},
year={2023},
eprint={2304.05200},
archivePrefix={arXiv},
primaryClass={cs.CR}
}

@misc{boucher2023trojan,
title={Trojan Source: Invisible Vulnerabilities}, 
author={Nicholas Boucher and Ross Anderson},
year={2023},
eprint={2111.00169},
archivePrefix={arXiv},
primaryClass={cs.CR}
}

@misc{melara2022software,
title={What is Software Supply Chain Security?}, 
author={Marcela S. Melara and Mic Bowman},
year={2022},
eprint={2209.04006},
archivePrefix={arXiv},
primaryClass={cs.CR}
}

@inproceedings{10.1145/2814270.2814313,
author = {Mastrangelo, Luis and Ponzanelli, Luca and Mocci, Andrea and Lanza, Michele and Hauswirth, Matthias and Nystrom, Nathaniel},
title = {Use at Your Own Risk: The Java Unsafe API in the Wild},
year = {2015},
isbn = {9781450336895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814270.2814313},
doi = {10.1145/2814270.2814313},
abstract = {Java is a safe language. Its runtime environment provides strong safety guarantees that any Java application can rely on. Or so we think. We show that the runtime actually does not provide these guarantees---for a large fraction of today's Java code. Unbeknownst to many application developers, the Java runtime includes a "backdoor" that allows expert library and framework developers to circumvent Java's safety guarantees. This backdoor is there by design, and is well known to experts, as it enables them to write high-performance "systems-level" code in Java. For much the same reasons that safe languages are preferred over unsafe languages, these powerful---but unsafe---capabilities in Java should be restricted. They should be made safe by changing the language, the runtime system, or the libraries. At the very least, their use should be restricted. This paper is a step in that direction. We analyzed 74 GB of compiled Java code, spread over 86,479 Java archives, to determine how Java's unsafe capabilities are used in real-world libraries and applications. We found that 25% of Java bytecode archives depend on unsafe third-party Java code, and thus Java's safety guarantees cannot be trusted. We identify 14 different usage patterns of Java's unsafe capabilities, and we provide supporting evidence for why real-world code needs these capabilities. Our long-term goal is to provide a foundation for the design of new language features to regain safety in Java.},
booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {695–710},
numpages = {16},
keywords = {Maven Central, unsafe, Java, mining, Stack Overflow, patterns},
location = {Pittsburgh, PA, USA},
series = {OOPSLA 2015}
}

@article{10.1145/2858965.2814313,
author = {Mastrangelo, Luis and Ponzanelli, Luca and Mocci, Andrea and Lanza, Michele and Hauswirth, Matthias and Nystrom, Nathaniel},
title = {Use at Your Own Risk: The Java Unsafe API in the Wild},
year = {2015},
issue_date = {October 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/2858965.2814313},
doi = {10.1145/2858965.2814313},
abstract = {Java is a safe language. Its runtime environment provides strong safety guarantees that any Java application can rely on. Or so we think. We show that the runtime actually does not provide these guarantees---for a large fraction of today's Java code. Unbeknownst to many application developers, the Java runtime includes a "backdoor" that allows expert library and framework developers to circumvent Java's safety guarantees. This backdoor is there by design, and is well known to experts, as it enables them to write high-performance "systems-level" code in Java. For much the same reasons that safe languages are preferred over unsafe languages, these powerful---but unsafe---capabilities in Java should be restricted. They should be made safe by changing the language, the runtime system, or the libraries. At the very least, their use should be restricted. This paper is a step in that direction. We analyzed 74 GB of compiled Java code, spread over 86,479 Java archives, to determine how Java's unsafe capabilities are used in real-world libraries and applications. We found that 25% of Java bytecode archives depend on unsafe third-party Java code, and thus Java's safety guarantees cannot be trusted. We identify 14 different usage patterns of Java's unsafe capabilities, and we provide supporting evidence for why real-world code needs these capabilities. Our long-term goal is to provide a foundation for the design of new language features to regain safety in Java.},
journal = {SIGPLAN Not.},
month = {oct},
pages = {695–710},
numpages = {16},
keywords = {Maven Central, unsafe, Java, mining, patterns, Stack Overflow}
}

